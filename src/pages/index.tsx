import Head from 'next/head';

import { Box } from '@chakra-ui/react';
import { type PrismaClient } from '@prisma/client';
import { type DefaultArgs } from '@prisma/client/runtime/library';
import { createColumnHelper, type ColumnDef } from '@tanstack/react-table';
import { useAtom } from 'jotai';
import { type GetServerSidePropsContext } from 'next';
import { type Session } from 'next-auth';
import { serialize } from 'superjson';
import { DataTable, tableAtom } from '~/components/data-table';
import { createCaller } from '~/server/api/root';
import { api } from '~/utils/api';
import { decodeStatus, encodeStatus, getColumnFilter } from '~/utils/helper';

export default function Home({
  users,
  totalUsers,
}: {
  users: User[];
  totalUsers: number;
}) {
  const [tableData] = useAtom(tableAtom);

  const statusFilter = getColumnFilter(tableData.columnFilters, 'status');
  const idFilter = getColumnFilter(tableData.columnFilters, 'id');

  const userData = api.user.getUsers.useQuery({
    page: tableData.page,
    limit: tableData.pageSize,
    status: decodeStatus(statusFilter ?? 'unknown'),
    id: idFilter,
  });

  const data = userData.data?.data ?? users;
  const total = userData.data?.pagination?.total ?? totalUsers;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box maxW="container.xl" mx="auto" mt={8}>
        <DataTable columns={columns} data={data} totalRowCount={total} />
      </Box>
    </>
  );
}

type User = {
  id: string;
  name: string | null;
  email: string | null;
  image: string | null;
  status: number | null;
};

const helper = createColumnHelper<User>();

const columns = [
  helper.accessor('id', {
    header: 'ID',
    cell: (info) => info.getValue(),
  }),
  helper.accessor('status', {
    header: 'Status',
    cell: (info) => encodeStatus(info.getValue()),
  }),
] as ColumnDef<User, unknown>[];

export const getServerSideProps = async (
  ctx: GetServerSidePropsContext & {
    session: Session | null;
    db: PrismaClient<
      {
        log: ('error' | 'query' | 'warn')[];
      },
      never,
      DefaultArgs
    >;
  }
) => {
  const caller = createCaller(ctx);

  const users = await caller.user.getUsers({});
  const { json } = serialize(users.data);

  return {
    props: {
      users: json,
      totalUsers: users.pagination.total,
    },
  };
};
